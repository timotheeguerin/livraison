name: Publish

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main
      - github-release

  workflow_dispatch: {}

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Check version changes
        uses: EndBug/version-check@36ff30f37c7deabe56a30caa043d127be658c425 # v2.1.5
        id: version
        with:
          # static-checking: localIsNew
          file-url: https://unpkg.com/livraison@latest/package.json
          file-name: package.json

      - name: Print version
        if: steps.version.outputs.changed == 'true'
        env:
          NEW_VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Version change found! New version: ${NEW_VERSION}"

  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64

          # - os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   code-target: win32-arm64

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64-gnu

          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   code-target: linux-arm64-gnu

          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   code-target: linux-x64-musl

          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   code-target: linux-arm64-musl

          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   code-target: darwin-x64

          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   code-target: darwin-arm64
    name: Package ${{ matrix.code-target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup

      - run: pnpm install
        name: Install dependencies

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: |
          cargo build --release -p livraison --bin livraison --target=${{ matrix.target }}
            # The binaries are zipped to fix permission loss https://github.com/actions/upload-artifact#permission-loss

      - name: Archive Binaries
        if: runner.os == 'Windows'
        run: |
          BIN_NAME=livraison-${{ matrix.code-target }}
          mv target/${{ matrix.target }}/release/livraison.exe $BIN_NAME.exe
          7z a $BIN_NAME.zip $BIN_NAME.exe

      # The binaries are zipped to fix permission loss https://github.com/actions/upload-artifact#permission-loss
      - name: Archive Binaries
        if: runner.os != 'Windows'
        run: |
          BIN_NAME=livraison-${{ matrix.code-target }}
          mv target/${{ matrix.target }}/release/livraison $BIN_NAME
          tar czf $BIN_NAME.tar.gz $BIN_NAME

      - name: Upload Binary
        uses: actions/upload-artifact@v4.6.2
        with:
          if-no-files-found: error
          name: binaries-${{ matrix.code-target }}
          path: |
            *.zip
            *.tar.gz

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@4.3.0
        with:
          merge-multiple: true
      - name: Create GitHub Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          body: ${{ steps.run.outputs.CHANGELOG }}
          draft: false
          files: livraison-*
          name: livraison v${{ needs.check.outputs.version }}
          tag_name: livraison${{ needs.check.outputs.version }}
          fail_on_unmatched_files: true
          target_commitish: ${{ github.sha }}
  build_npm:
    runs-on: ubuntu-latest
    environment: npm
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup

      - run: pnpm install
        name: Install dependencies

      - run: pnpm build
        name: Build

      - run: pnpm test
        name: Test

      - run: |
          git status --porcelain
          git diff --no-ext-diff --quiet --exit-code
        name: Check not out of date generated files

      - uses: actions/upload-artifact@v4
        with:
          name: comment
          path: comment-out/

      - run: pnpm -r publish --access public --no-git-checks
        name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
